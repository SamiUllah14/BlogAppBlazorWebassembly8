@page "/register"
@inject IAuthService authService
@using BlogApp.Client.Authentication
@using System.ComponentModel.DataAnnotations

<h2>User Registration</h2>

@if (registrationComplete)
{
    <p>Registration successful!</p>
}
else
{
    <EditForm Model="@userRegister" OnValidSubmit="@RegisterUser">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="email">Email:</label>
            <InputText id="email" @bind-Value="userRegister.Email" class="form-control" />
            <ValidationMessage For="@(() => userRegister.Email)" />
        </div>

        <div class="form-group">
            <label for="password">Password:</label>
            <InputText id="password" @bind-Value="userRegister.Password" class="form-control" type="password" />
            <ValidationMessage For="@(() => userRegister.Password)" />
        </div>

        <div class="form-group">
            <label for="confirmPassword">Confirm Password:</label>
            <InputText id="confirmPassword" @bind-Value="userRegister.ConfirmPassword" class="form-control" type="password" />
            <ValidationMessage For="@(() => userRegister.ConfirmPassword)" />
        </div>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger" role="alert">
                @errorMessage
            </div>
        }

        <button type="submit" class="btn btn-primary">Register</button>
    </EditForm>
}

@code {
    private UserRegister userRegister = new UserRegister();
    private bool registrationComplete = false;
    private string errorMessage = "";

    private async Task RegisterUser()
    {
        // Perform registration logic here
        try
        {
            var userId = await authService.Register(userRegister);
            registrationComplete = true;
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred during registration: " + ex.Message;
        }
    }
}
